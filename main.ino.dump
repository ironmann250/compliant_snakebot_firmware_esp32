#include <Arduino.h>
#include "TrackEncoder.h"
#include <ESP32MotorControl.h>
#include <QuickPID.h>
#include "tuning.h"

// Pin Definitions
#define ENCODER1_PIN_A 1
#define ENCODER1_PIN_B 2
#define ENCODER2_PIN_A 11
#define ENCODER2_PIN_B 12
#define RESET_COUNT_ON_BOOT 1
#define PULSES_PER_REV 8344
#define LED_PIN 7
#define PWM_2 41
#define AIN_1 38
#define AIN_2 37
#define ADC_1 1
#define ADC_2 2
#define BIN_1 36
#define BIN_2 35
#define SLEEP_PIN 39
#define BRAKING_THRESHOLD 1

// Motor Control
ESP32MotorControl MotorControl;

// PID Control Structure
struct MotorPID {
    float Setpoint = 0.0f;
    float Input = 0.0f;
    float Output = 0.0f;
    float Kp = 1.32f;
    float Ki = 10.28f;
    float Kd = 0.10f;
    QuickPID pid;
    
    MotorPID() : pid(&Input, &Output, &Setpoint, Kp, Ki, Kd,
                   QuickPID::pMode::pOnError,
                   QuickPID::dMode::dOnMeas,
                   QuickPID::iAwMode::iAwClamp,
                   QuickPID::Action::direct) {}
};

// Motor instances
MotorPID motor1, motor2;
TuneSet<> tuning;

// Encoder System
TrackEncoder *trackEncoder = nullptr;

void setup() {
    delay(100);
    Serial.begin(115200);
    delay(100);

    // Initialize encoder system
    trackEncoder = new TrackEncoder(ENCODER1_PIN_A, ENCODER1_PIN_B, 
                                  ENCODER2_PIN_A, ENCODER2_PIN_B, 
                                  "encoderStorage");
    if (!trackEncoder) {
        Serial.println("Failed to initialize TrackEncoder");
        while (1);
    }

    if (RESET_COUNT_ON_BOOT) {
        trackEncoder->resetCounts();
        Serial.println("Encoder counts reset");
    }
    trackEncoder->begin(200);

    // Initialize motors and PID
    initializeMotors();

    // Setup tuning parameters
    tuning.add("tar1", motor1.Setpoint);
    tuning.add("kp1", motor1.Kp);
    tuning.add("ki1", motor1.Ki);
    tuning.add("kd1", motor1.Kd);
    
    tuning.add("tar2", motor2.Setpoint);
    tuning.add("kp2", motor2.Kp);
    tuning.add("ki2", motor2.Ki);
    tuning.add("kd2", motor2.Kd);

    Serial.println("Dual Motor PID Controller Ready");
}

void updatePID(MotorPID &motor) {
    motor.pid.Compute();
}

void controlMotor(uint8_t motorNum, float output, float error) {
    if (abs(error) < BRAKING_THRESHOLD) {
        MotorControl.brake(motorNum);
    } else {
        MotorControl.drive(motorNum, output);
    }
}

void loop() {
    tuning.readSerial();
    
    // Update encoder inputs
    motor1.Input = trackEncoder->getEncoder1Count();
    motor2.Input = trackEncoder->getEncoder2Count();

    // Compute PID
    updatePID(motor1);
    updatePID(motor2);

    // Calculate errors
    float error1 = motor1.Setpoint - motor1.Input;
    float error2 = motor2.Setpoint - motor2.Input;

    // Drive motors with braking logic
    controlMotor(1, motor1.Output, error1);
    controlMotor(0, motor2.Output, error2);

    // Serial output format
    Serial.print("Motor1: ");
    Serial.print(motor1.Input);
    Serial.print(" ");
    Serial.print(motor1.Output);
    Serial.print(" ");
    Serial.print(error1);
    Serial.print(" | Motor2: ");
    Serial.print(motor2.Input);
    Serial.print(" ");
    Serial.print(motor2.Output);
    Serial.print(" ");
    Serial.println(error2);

    delay(10);
}